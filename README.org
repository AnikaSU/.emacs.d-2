#+TITLE: Emacs literate configuration 
#+AUTHOR: Mathieu Basille
#+EMAIL: basille@ufl.edu


* Table of Contents                                                     :TOC:
 - [[#preface][Preface]]
 - [[#getting-started][Getting started]]
   - [[#pre-requisites][Pre-requisites]]
   - [[#configuring-emacs][Configuring Emacs]]
   - [[#emacs-daemon][Emacs daemon]]
   - [[#a-note-on-the-use-of-org-mode-for-literate-configuration][A note on the use of =org-mode= for literate configuration]]
 - [[#key-bindings][Key bindings]]
   - [[#interface][Interface]]
   - [[#file-manager][File manager]]
   - [[#magit][Magit]]
   - [[#web-browser][Web browser]]
   - [[#polymode][Polymode]]
   - [[#org-mode][Org mode]]
   - [[#pdf-tools][PDF tools]]
   - [[#latex][LaTeX]]
   - [[#ess][ESS]]
   - [[#sql][SQL]]
   - [[#screen][Screen]]
   - [[#function-keys-f1f12][Function keys (~F1–F12~)]]
 - [[#screenshots][Screenshots]]
 - [[#to-do][To-do]]

* Preface

…


* Getting started


** Pre-requisites

This is a configuration for Emacs on Debian Testing (currently
Stretch). While most of it should work pretty much on any platform,
installing Emacs (Emacs 25.1 at the time of writing) is Debian
specific:

#+BEGIN_SRC sh
  sudo apt install emacs25
#+END_SRC

In addition, to addition need to be made for PDF Tools and
LaTeX. First a library for PDF Tools:

#+BEGIN_SRC sh
  sudo apt install libpoppler-glib-dev
#+END_SRC

Second, we define a central bibliographic folder at the level of the
LaTeX distribution. We first check the actual BibTeX folder:

#+BEGIN_SRC sh
  kpsewhich -show-path=.bib
#+END_SRC

This should contain:
=/home/<user>/.texlive2016/texmf-var/bibtex/bib//=. We thus link the
bibliographic folder (here =~/Work/Biblio/=) to this folder:

#+BEGIN_SRC sh
  mkdir -p ~/.texlive2016/texmf-var/bibtex/bib
  ln -s ~/Work/Biblio/ ~/.texlive2016/texmf-var/bibtex/bib
#+END_SRC

Finally, we also add a Python library for SQL formating, and Ditaa
for ASCII-based diagrams:

#+BEGIN_SRC sh
  sudo pip install format-sql
  sudo apt install ditaa  
#+END_SRC


** Configuring Emacs

To configure Emacs, the easiest is simply to clone this repository in
the =home= directory :

#+BEGIN_SRC sh  
  git clone https://github.com/basille/.emacs.d ~
#+END_SRC

And that's it! Opening Emacs will then do the magic!


** Emacs daemon

This configuration uses Emacs as a daemon, which allows to call Emacs
as a client. As a result, Emacs (client) loads blazing fast! Two
things are necessary for this: 1) have the daemon loaded at startup
(which only slightly increases startup time), and 2) provide a desktop
entry for Emacs as a client. Both operations are automatically taken
care of by this configuration. On Gnome, Emacs Client sometimes comes
with issues of focus; one way to solve the problem is to install the
extension [[https://extensions.gnome.org/extension/1005/focus-my-window/][Focus my window]].

To start the daemon, run:

#+BEGIN_SRC sh
  systemctl --user start emacs
#+END_SRC

To stop the daemon, run:

#+BEGIN_SRC sh
  systemctl --user stop emacs
#+END_SRC


** A note on the use of =org-mode= for literate configuration

The [[https://github.com/larstvei/dot-emacs][original idea]] is to embed configuration bits into an Org file
([[/init.org][init.org]]), which contains both code and explanations, making it a lot
easier to navigate and configure. Emacs, with the use of =org-babel=
is able to extract all configuration bits and assemble them in a
standard =init.el= file, and its compiled version =init.elc=. The
trick to make it work is that there is already an initial =init.el=
file provided with this repository, which does the job the first time
Emacs is loaded.

The initial =init.el= file also adjusts =Xresources= for Emacs (start
maximized and without scrollbars), and create the folder structure
necessary for the rest of the configuration.

This file looks like that:

#+BEGIN_SRC emacs-lisp
  ;; This file replaces itself with the actual configuration at first run.

  ;; Add X options to ~/.Xresources and initialize them
  (write-region "
  ! Emacs geometry
  !
  emacs.fullscreen: maximized
  emacs.geometry: 250x250
  emacs.toolBar: off
  emacs.verticalScrollBars: off
  emacs.horizontalScrollbars: off
  emacs25.fullscreen: maximized
  emacs25.geometry: 250x250
  emacs25.toolBar: off
  emacs25.verticalScrollBars: off
  emacs25.horizontalScrollbars: off

  " nil "~/.Xresources" 'append)
  (shell-command "xrdb -merge ~/.Xresources")

  ;; Create a starter for Emacs daemon
  (mkdir "~/.config/systemd/user/")
  (write-region "[Unit]
  Description=GNU Emacs 25 (daemon)
  Documentation=man:emacs(1) info:Emacs
  
  [Service]
  Type=forking
  ExecStart=/usr/bin/emacs --daemon
  ExecStop=/usr/bin/emacsclient --eval \"(progn (setq kill-emacs-hook nil) (kill-emacs))\"
  Restart=always
  #Environment=DISPLAY=:%i
  TimeoutStartSec=0
  
  [Install]
  WantedBy=default.target
  
  " nil "~/.config/systemd/user/emacs.service")
  (shell-command "systemctl --user enable emacs")
  (shell-command "systemctl --user start emacs")
  
  ;; Create a Desktop entry for Emacs client
  (write-region "[Desktop Entry]
  Version=1.0
  Name=GNU Emacs 25 (client)
  GenericName=Text Editor
  Comment=GNU Emacs using the daemon
  MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
  Exec=/usr/bin/emacsclient --create-frame --alternate-editor "" %F
  Icon=emacs25
  Type=Application
  Terminal=false
  Categories=Utility;Development;TextEditor;
  StartupWMClass=Emacs
  
" nil "~/.local/share/applications/emacsclient.desktop")

  ;; Create necessary directories and save abbrev silently
  (mkdir (concat user-emacs-directory "cache"))
  (mkdir (concat user-emacs-directory "functions"))
  (mkdir (concat user-emacs-directory "save"))
  (setq abbrev-file-name "~/.emacs.d/cache/abbrev_defs")
  (setq save-abbrevs 'silently)
  
  ;; We can't tangle without org!
  (require 'org)
  ;; Open the configuration
  (find-file (concat user-emacs-directory "init.org"))
  ;; tangle it
  (org-babel-tangle)
  ;; load it
  (load-file (concat user-emacs-directory "init.el"))
  ;; finally byte-compile it
  (byte-compile-file (concat user-emacs-directory "init.el"))
#+END_SRC

Note that this file is "locked" by Git, so that it is not modified
after the complete =init.el= file is prepared, with the command:

#+BEGIN_SRC sh
  git update-index --assume-unchanged init.el
#+END_SRC

To "unlock" it and make changes to the initial =init.el= file, use:

#+BEGIN_SRC sh
  git update-index --no-assume-unchanged init.el
#+END_SRC

After this initial load, a function (=tangle-init=) ensures that a new
=init.el= is generated at every modification of =init.org= (precisely
every time =init.org= is saved).

(note for Magit: to show untracked files within subdirectories, switch
the =--untracked-files= option with =git config
status.showUntrackedFiles all=; switch back with =git config
status.showUntrackedFiles normal=)


* Key bindings

** Interface

| Key name     | Operation                            |
|--------------+--------------------------------------|
| ~M-<arrows>~ | Move between windows                 |
| ~C-~~        | Next window (key above TAB)          |
| ~C-TAB~      | Cycle through buffers (this window)  |
| ~C-S-TAB~    | Cycle through buffers (other window) |
| ~C-x k~      | Kill THIS buffer                     |
| ~C-x C-b~    | ibuffer (list of buffers)            |

| Key name  | Operation                                   |
|-----------+---------------------------------------------|
| ~C-S-s~   | Backward search                             |
| ~C-r~     | Replace                                     |
| ~C-M-r~   | Replace using a RegExp                      |
| ~C-z~     | Undo                                        |
| ~C-+~     | Count words in region                       |
| ~C-=~     | Expand region  (more: ~=~; less: ~-~)       |
| ~C-x C-y~ | Evaluate expression and replace with result |

| Key name | Operation                       |
|----------+---------------------------------|
| ~C-.~    | Imenu (main sections/headers)   |
| ~M-x~    | SMEX                            |
| ~M-!~    | Shell-command in the minibuffer |
| ~C-h m~  | Check modes in a buffer         |

| Key name  | Operation                                                    |
|-----------+--------------------------------------------------------------|
| ~C-x r m~ | Bookmark a file (works on directories and remote files too!) |
| ~C-x r b~ | Jump to a bookmark                                           |
| ~C-x r l~ | List bookmarks                                               |

| Key name  | Operation                                                                       |
|-----------+---------------------------------------------------------------------------------|
| ~C-p~     | In Ivy mode, use input as candidate                                             |
| ~C-c C-o~ | =ivy-occur=: save current search into a new buffer (then ~C-d~ to delete lines) |
| ~TAB~     | Complete anything                                                               |
| or        | Fold/unfold functions/regions (if code indented)                                |

| Key name              | Operation                                |
|-----------------------+------------------------------------------|
| ~C-c ! v~             | Verify Flycheck setup for current buffer |
| ~C-c ! n~ / ~C-c ! p~ | Next and previous error                  |
| ~C-c ! l~             | List all errors in a buffer              |


** File manager

When opening a file with Ivy (~C-x C-f~):

| Key name | Operation                     |
|----------+-------------------------------|
| ~//~     | Go to the root directory      |
| =~=      | Go to the home directory      |
| ~ENTER~  | Enter Dired in this directory |

In Dired (see mark [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Marks-vs-Flags.html][here]], and operations on file [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Operating-on-Files.html#Operating-on-Files][here]]) or ibuffer:

| Key name | Operation                                                    |
|----------+--------------------------------------------------------------|
| ~$~      | Go to a bookmark                                             |
| ~(~      | Hide/show details                                            |
| ~s~      | Sort by date or filename                                     |
| ~S~      | Interactively sort (by filename, date, reverse, etc.)        |
| ~i~      | Include subdirectory                                         |
|----------+--------------------------------------------------------------|
| ~o~      | Open in other window                                         |
| ~m~      | Mark a file/folder                                           |
| ~* /~    | Mark all folders                                             |
| ~* s~    | Mark all files and folders                                   |
| ~u~      | Unmark a file/folder                                         |
| ~U~      | Unmark all                                                   |
| ~t~      | Toggle mark                                                  |
| ~/~      | Dynamically filter files/folders (=dired-narrow=)            |
|----------+--------------------------------------------------------------|
| ~C~      | Copy (marked) file(s)                                        |
| ~D~      | Delete (marked) file(s)                                      |
| ~R~      | Rename (marked) file(s)                                      |
| ~A~      | Search with regexp content of (marked) file(s)               |
| ~Q~      | Search and replace with regexp content of (marked) file(s)   |
| ~e~      | =ediff= two marked files                                     |
| ~=~      | Launch =ediff= file at point, requesting for file to compare |




** Magit

| Key name | Operation                                        |
|----------+--------------------------------------------------|
| ~y~      | Show information on branches and commits         |
| ~C-f~    | GitFlow from within Magit                        |
| ~K~      | =git ls-files= from within Magit                 |


** Web browser

| Key name      | Operation                       |
|---------------+---------------------------------|
| ~<backspace>~ | Go to previous page             |
| ~f~           | Open page with external browser |


** Polymode

| Key name        | Operation                               |
|-----------------+-----------------------------------------|
| ~C-PAGE DOWN~   | Move to previous chunk                  |
| ~C-PAGE UP~     | Move to next chunk                      |
| ~C-S-PAGE DOWN~ | Move to previous chunk of the same type |
| ~C-S-PAGE UP~   | Move to next chunk of the same type     |


** Org mode

| Key name  | Operation                                        |
|-----------+--------------------------------------------------|
| ~C-c C-q~ | Add a Tag in Org mode                            |
|           | (use =:TOC:= for an automatic table of contents) |
| ~<s TAB~  | Add a source code block                          |


** PDF tools

| Key name    | Operation                                         |
|-------------+---------------------------------------------------|
| ~P~         | Fit to the page                                   |
| ~H~         | Fit to the height                                 |
| ~W~         | Fit to the width                                  |
| ~g~         | refreshes the PDF                                 |
| ~h~         | opens the help of PDF tools                       |
|-------------+---------------------------------------------------|
| ~C-c C-a h~ | Highlight text and annotate (~C-c C-c~ to commit) |
| ~C-c C-a t~ | Annotate anywhere (~C-c C-c~ to commit)           |
| ~C-c C-a o~ | Strike through text                               |
| ~C-c C-a D~ | Delete annotation                                 |
| ~C-c C-a l~ | List annotations                                  |


** LaTeX

| Key name         | Operation                                            |
|------------------+------------------------------------------------------|
| ~C-c C-l~        | Shows compilation logs in LaTeX                      |
| ~C-c C-v~        | Calls viewer with forward search from LaTeX document |
| ~C-<left click>~ | Inverse search in PDF document                       |
| ~C-c =~          | Displays a dynamic table of contents                 |
| ~C-c (~          | RefTeX inserts label                                 |
| ~C-c )~          | RefTeX references label                              |
| ~C-c [~          | RefTeX inserts citation (from BibTeX)                |


** ESS

| Key name      | Operation                                                  |
|---------------+------------------------------------------------------------|
| ~C-c C-r~     | Move cursor to previous command + at the top of the window |
| ~C-c C-o~     | Delete everything from last command to current prompt      |
| ~C-c C-e C-w~ | Readjust width to the window width                         |
| ~C-M-\~       | Indent region (using formatR)                              |
| ~C-x C-i~     | Indent buffer (using rfmt)                                 |
| ~C-return~    | Add a fenced R code block (in RMarkdown file)              |
| ~C-S-return~  | Add inline R code (in RMarkdown file)                      |

*Special:* Ask for password in R and hide it while typing:

#+BEGIN_SRC R
cat("Password: "); pwd <- readLines(file("stdin"), 1)
#+END_SRC


** SQL

| Key name   | Operation                          |
|------------+------------------------------------|
| ~C-return~ | Send paragraph or region if active |


** Screen

=screen= key bindings collide with Emacs own key bindings in the
Shell. To prevent this, every =screen= key needs to be prefixed by
~C-l~. For instance, to detach a =screen= session (normally ~C-a
C-d~), use ~C-l C-a C-l C-d~. 

=screen= operations:

- List existing sessions:
  #+BEGIN_SRC sh
    screen -ls
  #+END_SRC
- Open a session (note that sessions must be open in a regular
  terminal first to prevent printing issues in Emacs):
  #+BEGIN_SRC sh
    screen -S <session_name>
  #+END_SRC
- Detach a session:
  #+BEGIN_SRC sh
    screen -d <number/name>
  #+END_SRC
  or interactively in the session: ~C-a C-d~
- Attach a session:
  #+BEGIN_SRC sh
    screen -r <number/name>
  #+END_SRC
  If need be, detach the session at the same time:
  #+BEGIN_SRC sh
    screen -d -r <number/name>
  #+END_SRC
  If really necessary:
  #+BEGIN_SRC sh
    screen -D -RR <number/name>
  #+END_SRC
  ("Attach here and now. Whatever that means, just do it.")
- Kill a session
  #+BEGIN_SRC sh
    screen -X -S <number/name> quit
  #+END_SRC
  or interactively in the session: ~C-a :quit~


** Function keys (~F1–F12~)

Use position registers (a sort of bookmark) with ~F1—F4~: ~C-F1~ to
~C-F4~ to save a register, ~F1~ to ~F4~ to jump to a saved register:

| Key name    | Operation                                                    |
|-------------+--------------------------------------------------------------|
| ~F1–F4~     | Jump to registers                                            |
| ~C-F1–C-F4~ | Save registers                                               |
| ~C-S-F1~    | Bookmark a file (works on directories and remote files too!) |
| ~C-S-F4~    | List bookmarks                                               |


| Key name | Operation                                            |
|----------+------------------------------------------------------|
| ~F5~     | NeoTree in side panel                                |
| ~C-F5~   | Minimap in side panel                                |
| ~F6~     | Dired in current directory                           |
| ~C-F6~   | Activate write mode in Dired (~C-c C-c~ to exit)     |
| ~F7~     | Polymode Weave                                       |
| ~C-F7~   | Run knitr::pandoc (with custom options) on .Rmd file |
| ~F8~     | Magit                                                |
| ~C-F8~   | shell-xterm (Shell with clearing capabilities)       |

| Key name         | Operation                            |
|------------------+--------------------------------------|
| ~F9~             | Highlight region (like a marker)     |
| ~C-F9~           | to move to the next highlighted text |
| ~C-S-F9~         | Un-highlight everything              |
| ~F10~            | Toggle line wrapping                 |
| ~C-F10~          | Toggle current line highlight mode   |
| ~C-S-F10~        | Toggle column highlight mode         |
| ~C-S-F10~        | Fold/unfold functions/regions        |
| ~F11~            | Multiple cursors in all lines        |
| ~C-F11~          | Smart multiple cursors               |
| ~C-S-F11~        | Multiple cursors: next like selected |
| ~C-S-Left click~ | Multiple cursors on mouse click      |
| ~F12~            | Flyspell correction suggestions      |
| ~C-F12~          | Toggle Flyspell                      |
| ~C-S-F12~        | Change Ispell dictionary             |


* Screenshots

A good demonstration could not be complete without screenshots, so
here is Emacs in action:

- Emacs on the =init.org= config file, in Org mode, with
  Project-explorer in the left window, and Magit in the right window
  with its main commands at the bottom.

  #+CAPTION: Emacs in Org mode + project explorer + Magit
  #+NAME: emacs-org
  [[emacs-proj-org-magit.png]]

- Emacs opened with a RMarkdown file (=.Rmd=), including YAML headers
  and R code chunks, with the help page of a function in the right
  window together with the R buffer at the bottom.

  #+CAPTION: Emacs on a RMarkdown file (with ESS)
  #+NAME: emacs-ess
  [[emacs-markdown-yaml-ess.png]]


* To-do

- Write preface
- Flycheck
- R:
  - Set up Polymode for R (weave/tangle/export, previous/next chunk)
  - Document ESS
- Integrate Markdown-toc (bug)
- SQL server credentials
- Configure Org mode
- Additional functions
