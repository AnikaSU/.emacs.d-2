#+TITLE: Emacs literate configuration 
#+AUTHOR: Mathieu Basille
#+EMAIL: basille@ufl.edu


* Table of Contents                                                     :TOC:
 - [[#preface][Preface]]
 - [[#getting-started][Getting started]]
   - [[#pre-requisites][Pre-requisites]]
   - [[#configuring-emacs][Configuring Emacs]]
   - [[#a-note-on-the-use-of-org-mode-for-literate-configuration][A note on the use of =org-mode= for literate configuration]]
 - [[#key-bindings][Key bindings]]
   - [[#interface][Interface]]
   - [[#special][Special]]
   - [[#file-manager][File manager]]
   - [[#polymode][Polymode]]
   - [[#pdf-tools][PDF tools]]
   - [[#latex][LaTeX]]
   - [[#ess][ESS]]
   - [[#function-keys-f1f12][Function keys (~F1–F12~)]]
 - [[#screenshots][Screenshots]]
 - [[#to-do][To-do]]

* Preface

…


* Getting started


** Pre-requisites

This is a configuration for Emacs on Debian Testing (currently
Stretch). While most of it should work pretty much on any platform,
installing Emacs (Emacs 25.1 at the time of writing) is Debian
specific:

#+BEGIN_SRC sh
  sudo apt install emacs25
#+END_SRC

In addition, to addition need to be made for PDF Tools and
LaTeX. First a library for PDF Tools:

#+BEGIN_SRC sh
  sudo apt install libpoppler-glib-dev
#+END_SRC

Second, we define a central bibliographic folder at the level of the
LaTeX distribution. We first check the actual BibTeX folder:

#+BEGIN_SRC sh
  kpsewhich -show-path=.bib
#+END_SRC

This should contain:
=/home/<user>/.texlive2016/texmf-var/bibtex/bib//=. We thus link the
bibliographic folder (here =~/Work/Biblio/=) to this folder:

#+BEGIN_SRC sh
  mkdir -p ~/.texlive2016/texmf-var/bibtex/bib
  ln -s ~/Work/Biblio/ ~/.texlive2016/texmf-var/bibtex/bib
#+END_SRC

Finally, we also add a Python library for SQL formating, and Ditaa
for ASCII-based diagrams:

#+BEGIN_SRC sh
  sudo pip install format-sql
  sudo apt install ditaa  
#+END_SRC


** Configuring Emacs

To configure Emacs, the easiest is simply to clone this repository in
the =home= directory :

#+BEGIN_SRC sh  
  git clone https://github.com/basille/.emacs.d ~
  #+END_SRC

And that's it! Opening Emacs will then do the magic!


** A note on the use of =org-mode= for literate configuration

The [[https://github.com/larstvei/dot-emacs][original idea]] is to embed configuration bits into an Org file
([[/init.org][init.org]]), which contains both code and explanations, making it a lot
easier to navigate and configure. Emacs, with the use of =org-babel=
is able to extract all configuration bits and assemble them in a
standard =init.el= file, and its compiled version =init.elc=. The
trick to make it work is that there is already an initial =init.el=
file provided with this repository, which does the job the first time
Emacs is loaded.

The initial =init.el= file also adjusts =Xresources= for Emacs (start
maximized and without scrollbars), and create the folder structure
necessary for the rest of the configuration.

This file looks like that:

#+BEGIN_SRC emacs-lisp
  ;; This file replaces itself with the actual configuration at first run.

  ;; Add X options to ~/.Xresources and initialize them
  (write-region "
  ! Emacs geometry
  !
  emacs.fullscreen: maximized
  emacs.geometry: 250x250
  emacs.toolBar: off
  emacs.verticalScrollBars: off
  emacs.horizontalScrollbars: off
  emacs25.fullscreen: maximized
  emacs25.geometry: 250x250
  emacs25.toolBar: off
  emacs25.verticalScrollBars: off
  emacs25.horizontalScrollbars: off

  " nil "~/.Xresources" 'append)
  (shell-command "xrdb -merge ~/.Xresources")

  ;; Create necessary directories and save abbrev silently
  (mkdir (concat user-emacs-directory "cache"))
  (mkdir (concat user-emacs-directory "functions"))
  (mkdir (concat user-emacs-directory "save"))
  (setq abbrev-file-name "~/.emacs.d/cache/abbrev_defs")
  (setq save-abbrevs 'silently)
  
  ;; We can't tangle without org!
  (require 'org)
  ;; Open the configuration
  (find-file (concat user-emacs-directory "init.org"))
  ;; tangle it
  (org-babel-tangle)
  ;; load it
  (load-file (concat user-emacs-directory "init.el"))
  ;; finally byte-compile it
  (byte-compile-file (concat user-emacs-directory "init.el"))
#+END_SRC

Note that this file is "locked" by Git, so that it is not modified
after the complete =init.el= file is prepared, with the command:

#+BEGIN_SRC sh
  git update-index --assume-unchanged init.el
#+END_SRC

To "unlock" it and make changes to the initial =init.el= file, use:

#+BEGIN_SRC sh
  git update-index --no-assume-unchanged init.el
#+END_SRC

After this initial load, a function (=tangle-init=) ensures that a new
=init.el= is generated at every modification of =init.org= (precisely
every time =init.org= is saved).

(note for Magit: to show untracked files within subdirectories, switch
the =--untracked-files= option with =git config
status.showUntrackedFiles all=; switch back with =git config
status.showUntrackedFiles normal=)


* Key bindings

** Interface

| Key name     | Operation                            |
|--------------+--------------------------------------|
| ~M-<arrows>~ | Move between windows                 |
| ~C-~~        | Next window (key above TAB)          |
| ~C-TAB~      | Cycle through buffers (this window)  |
| ~C-S-TAB~    | Cycle through buffers (other window) |
| ~C-x k~      | Kill THIS buffer                     |
| ~C-x C-b~    | Buffer menu (list of buffers)        |

| Key name  | Operation                                   |
|-----------+---------------------------------------------|
| ~C-S-s~   | Backward search                             |
| ~C-r~     | Replace                                     |
| ~C-M-r~   | Replace using a RegExp                      |
| ~C-z~     | Undo                                        |
| ~C-+~     | Count words in region                       |
| ~C-=~     | Expand region  (more: ~=~; less: ~-~)       |
| ~C-x C-y~ | Evaluate expression and replace with result |

| Key name | Operation                       |
|----------+---------------------------------|
| ~C-.~    | Imenu (main sections/headers)   |
| ~M-x~    | SMEX                            |
| ~M-!~    | Shell-command in the minibuffer |
| ~C-h m~  | Check modes in a buffer         |

| Key name  | Operation                                                    |
|-----------+--------------------------------------------------------------|
| ~C-x r m~ | Bookmark a file (works on directories and remote files too!) |
| ~C-x r b~ | Jump to a bookmark                                           |
| ~C-x r l~ | List bookmarks                                               |


** Special

| Key name  | Operation                                                    |
|-----------+--------------------------------------------------------------|
| ~C-f~     | In IDO mode, fall back to normal prompt                      |
| ~TAB~     | Complete anything                                            |
| or        | Fold/unfold functions/regions (if code indented)             |
| ~C-f~     | GitFlow from within Magit                                    |
| ~C-c C-q~ | Add a Tag in Org mode                                        |


** File manager

When opening a file with IDO (~C-x C-f~):

| Key name | Operation                     |
|----------+-------------------------------|
| ~//~     | Go to the root directory      |
| =~/=     | Go to the home directory      |
| ~C-d~    | Enter Dired in this directory |
| ~$~      | Go to a bookmark              |

In Dired (see mark [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Marks-vs-Flags.html][here]], and operations on file [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Operating-on-Files.html#Operating-on-Files][here]]):

| Key name | Operation                                                  |
|----------+------------------------------------------------------------|
| ~$~      | Go to a bookmark                                           |
| ~(~      | Hide/show details                                          |
| ~s~      | Sort by date or filename                                   |
| ~m~      | Mark a file/folder                                         |
| ~* /~    | Mark all folders                                           |
| ~* s~    | Mark all files and folders                                 |
| ~u~      | Unmark a file/folder                                       |
| ~U~      | Unmark all                                                 |
| ~t~      | Toggle mark                                                |
|----------+------------------------------------------------------------|
| ~C~      | Copy (marked) file(s)                                      |
| ~D~      | Delete (marked) file(s)                                    |
| ~R~      | Rename (marked) file(s)                                    |
| ~A~      | Search with regexp content of (marked) file(s)             |
| ~Q)~     | Search and replace with regexp content of (marked) file(s) |


** Polymode

| Key name        | Operation                               |
|-----------------+-----------------------------------------|
| ~C-PAGE DOWN~   | Move to previous chunk                  |
| ~C-PAGE UP~     | Move to next chunk                      |
| ~C-S-PAGE DOWN~ | Move to previous chunk of the same type |
| ~C-S-PAGE UP~   | Move to next chunk of the same type     |



** PDF tools

| Key name | Operation                   |
|----------+-----------------------------|
| ~P~      | Fit to the page             |
| ~H~      | Fit to the height           |
| ~W~      | Fit to the width            |
| ~g~      | refreshes the PDF           |
| ~h~      | opens the help of PDF tools |


** LaTeX

| Key name     | Operation                                            |
|--------------+------------------------------------------------------|
| ~C-c C-l~    | Show compilation logs in LaTeX                       |
| ~C-c C-v~    | Calls viewer with forward search from LaTeX document |
| ~Ctrl+click~ | Inverse search in PDF document                       |


** ESS

| Key name     | Operation                                                  |
|--------------+------------------------------------------------------------|
| ~C-c C-r~    | Move cursor to previous command + at the top of the window |
| ~C-c C-o~    | Delete everything from last command to current prompt      |
| ~C-return~   | Add a fenced R code block (in RMarkdown file)              |
| ~C-S-return~ | Add inline R code (in RMarkdown file)                      |


** Function keys (~F1–F12~)

Use position registers (a sort of bookmark) with ~F1—F4~: ~C-F1~ to
~C-F4~ to save a register, ~F1~ to ~F4~ to jump to a saved register:

| Key name    | Operation                                                    |
|-------------+--------------------------------------------------------------|
| ~F1–F4~     | Jump to registers                                            |
| ~C-F1–C-F4~ | Save registers                                               |
| ~C-S-F1~    | Bookmark a file (works on directories and remote files too!) |
| ~C-S-F4~    | List bookmarks                                               |


| Key name | Operation                                            |
|----------+------------------------------------------------------|
| ~F5~     | Project explorer                                     |
| ~C-F5~   | Dired in current directory                           |
| ~C-S-F5~ | Activate write mode in Dired (~C-c C-c~ to exit)     |
| ~F6~     | Magit                                                |
| ~C-F6~   | Eshell                                               |
| ~F7~     | Polymode Weave                                       |
| ~C-F7~   | Polymode Export                                      |
| ~C-F8~   | Run knitr::pandoc (with custom options) on .Rmd file |
| ~C-S-F8~ | Run bookdown::render on index.Rmd                    |

| Key name  | Operation                            |
|-----------+--------------------------------------|
| ~F9~      | Highlight region (like a marker)     |
| ~C-F9~    | to move to the next highlighted text |
| ~C-S-F9~  | Un-highlight everything              |
| ~F10~     | Toggle line wrapping                 |
| ~C-F10~   | Toggle current line highlight mode   |
| ~C-S-F10~ | Toggle column highlight mode         |
| ~C-S-F10~ | Fold/unfold functions/regions        |
| ~F11~     | Multiple cursors in all lines        |
| ~C-F11~   | Smart multiple cursors               |
| ~C-S-F11~ | Multiple cursors: next like selected |
| ~F12~     | Flyspell correction suggestions      |
| ~C-F12~   | Toggle Flyspell                      |
| ~C-S-F12~ | Change Ispell dictionary             |


* Screenshots

A good demonstration could not be complete without screenshots, so
here is Emacs in action:

- Emacs on the =init.org= config file, in Org mode, with
  Project-explorer in the left window, and Magit in the right window
  with its main commands at the bottom.

  #+CAPTION: Emacs in Org mode + project explorer + Magit
  #+NAME: emacs-org
  [[emacs-proj-org-magit.png]]

- Emacs opened with a RMarkdown file (=.Rmd=), including YAML headers
  and R code chunks, with the help page of a function in the right
  window together with the R buffer at the bottom.

  #+CAPTION: Emacs on a RMarkdown file (with ESS)
  #+NAME: emacs-ess
  [[emacs-markdown-yaml-ess.png]]


* To-do

- Write preface
- Flycheck
- R:
  - Set up Polymode for R (weave/tangle/export, previous/next chunk)
  - Document ESS
- Integrate Markdown-toc (bug)
- SQL server credentials
- Configure Org mode
- Additional functions
